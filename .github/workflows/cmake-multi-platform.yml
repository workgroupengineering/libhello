# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        shared_libs: [true,false]
        platform: [arm64,x64,x86]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++        
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl           

    steps:
    - uses: actions/checkout@v4
    
    - name: Get CMake
      uses: symbitic/install-cmake@master
      if: ${{ matrix.os == 'macos-latest' }}
      
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Clone FreeType
      run: |
        git clone https://gitlab.freedesktop.org/freetype/freetype.git  --no-checkout
        git fetch -t
        cd freetype
        git checkout VER-2-13-2
        git apply ./../CMakeLists.patch

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DBUILD_SHARED_LIBS=${{ matrix.shared_libs }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}        
        -S ${{ github.workspace }}
        
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target package
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.3
      with:
      # Artifact name
        name: Build # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/_CPack_Packages/*
          !${{ steps.strings.outputs.build-output-dir }}/_CPack_Packages/**/*.tar.gz
          !${{ steps.strings.outputs.build-output-dir }}/_CPack_Packages/**/*.zip
        # The desired behavior if no files are found using the provided path.
        
